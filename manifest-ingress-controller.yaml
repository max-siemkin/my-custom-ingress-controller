apiVersion: v1
kind: ServiceAccount
metadata:
    name: my-ingress-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    name: pod-reader
rules:
    - apiGroups: [""]
      resources: ["services", "secrets"]
      verbs: ["get", "watch", "list"]
    - apiGroups: ["extensions", "networking.k8s.io"]
      resources: ["ingresses"]
      verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    name: pod-reader-binding
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: pod-reader
subjects:
    - kind: ServiceAccount
      name: my-ingress-controller
      namespace: default
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
    name: my-ingress-controller
    namespace: default
    labels:
        app: ingress-controller
spec:
    selector:
        matchLabels:
            app: ingress-controller
    template:
        metadata:
            labels:
                app: ingress-controller
        spec:
            hostNetwork: true
            dnsPolicy: ClusterFirstWithHostNet
            serviceAccountName: my-ingress-controller
            containers:
                - name: my-ingress-controller
                  image: " -= your docker registry =- "
                  imagePullPolicy: Always
                  resources:
                      limits:
                          cpu: "200m"
                          memory: "200Mi"
                      requests:
                          cpu: "200m"
                          memory: "200Mi"
                  ports:
                      - name: http
                        containerPort: 80
                      - name: https
                        containerPort: 443
                  envFrom:
                      - configMapRef:
                            name: configmap
            imagePullSecrets:
                - name: myregistrykey
---
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
data:
    tls.crt: " -=your-tls.crt=- "
    tls.key: " -=your-tls.key=- "
metadata:
    name: secret-tls`
    # namespace: default
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
    name: my-ingress
    annotations:
        kubernetes.io/ingress.class: "public"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # namespace: default
spec:
    tls:
        - secretName: secret-tls
          hosts:
              - "site.com"
    rules:
        - host: "site.com"
          http:
              paths:
                  - pathType: Prefix
                    path: "/"
                    backend:
                        service:
                            name: site-svc
                            port:
                                number: 8080